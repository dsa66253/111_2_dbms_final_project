"import asyncio\n"
"import sys\n"
"import websockets\n"
"\n"
"# from merge\n"
"import mysql.connector\n"
"import argparse\n"
"\n"
"import warnings\n"
"warnings.filterwarnings(\"ignore\")\n"
"\n"
"connected_clients = set()\n"
"\n"
"connected_clients_id_name = {}\n"
"connected_clients_name_id = {}\n"
"\n"
"class ps_server():\n"
"    def __init__(self, user, password, ip, port):\n"
"        self.user = user\n"
"        self.password = password\n"
"        self.ip = ip\n"
"        self.port = port\n"
"        self.mysql_init()\n"
"        self.websocket_init()\n"
"        self.cursor\n"
"    \n"
"        # Mapping between socket and user name\n"
"        self.client2name = {}\n"
"        self.name2client = {}\n"
"\n"
"        # new-definded\n"
"        # self.connected_clients = set()\n"
"        # self.connected_clients_id_name = {}\n"
"\n"
"    def websocket_init(self):\n"
"        start_server = websockets.serve(self.websocket_handler, self.ip, self.port) ##\n"
"        print(self.connection)\n"
"        self.loop = asyncio.get_event_loop()\n"
"        self.loop.run_until_complete(start_server)\n"
"        print(f'Listening for connections on {self.ip}:{self.port}...')\n"
"        self.loop.run_forever()\n"
"\n"
"    def mysql_init(self):\n"
"        try:\n"
"            self.connection = mysql.connector.connect(\n"
"                host='localhost',\n"
"                user=self.user,\n"
"                password=self.password\n"
"            )\n"
"        except:\n"
"            print('database connection error')\n"
"\n"
"        self.cursor = self.connection.cursor()\n"
"        self.cursor.execute('DROP DATABASE IF EXISTS pub_sub')\n"
"        self.cursor.execute('CREATE DATABASE pub_sub')\n"
"        self.cursor.execute('USE pub_sub')\n"
"        self.cursor.execute('CREATE TABLE pub_infor (pub VARCHAR(20), sub VARCHAR(20))')\n"
"        self.cursor.execute('CREATE TABLE message (pub VARCHAR(20), msg VARCHAR(200))')\n"
"        self.connection.commit()\n"
"\n"
"    def pub(self, notified_socket, message):\n"
"        # Get user by notified socket, so we will know who sent the message\n"
"        user = connected_clients_id_name[notified_socket]\n"
"\n"
"        print(f'Publish message from {user}: {message}')\n"
"        self.cursor.execute('INSERT INTO message VALUES(%s, %s)'.encode(\"utf-8\"), (user.encode(\"utf-8\"), message.encode(\"utf-8\")))\n"
"        self.connection.commit()\n"
"\n"
"        query = 'SELECT sub FROM pub_infor WHERE pub = %s'.encode(\"utf-8\")\n"
"        self.cursor.execute(query, (user.encode(\"utf-8\"),))\n"
"\n"
"        results = self.cursor.fetchall()\n"
"        # print(results)\n"
"        \n"
"        # Iterate over connected clients and broadcast message\n"
"        to_inform = []\n"
"        for (client,) in results:\n"
"            to_inform.append(connected_clients_name_id[client])\n"
"        return to_inform\n"
"    \n"
"    def sub(self, notified_socket, name):\n"
"        if name == '':\n"
"            raise ValueError\n"
"\n"
"        user = connected_clients_id_name[notified_socket]\n"
"        print(f'{user} subscribes {name}')\n"
"\n"
"        self.cursor.execute('INSERT INTO pub_infor VALUES (%s, %s)'.encode(\"utf-8\"), (name.encode(\"utf-8\"), user.encode(\"utf-8\")))\n"
"        self.connection.commit()\n"
"    \n"
"    async def get_client_id(self, ws):\n"
"        for client, client_id in connected_clients.items():\n"
"            if client == ws:\n"
"                return client_id\n"
"            \n"
"    async def websocket_handler(self, websocket, path):\n"
"        # Add the new client to the connected clients set\n"
"        connected_clients.add(websocket)\n"
"\n"
"        # once connect return the id of the client\n"
"        client_id = self.get_client_id(websocket)\n"
"        print(f\"{client_id} connect!\")\n"
"        message = f\"My client id: {client_id}\"\n"
"        await websocket.send(message)\n"
"        \n"
"        # receive message\n"
"        try:\n"
"            while True:\n"
"                message = await websocket.recv()\n"
"                print(\"Unprocessed: \"+message)\n"
"\n"
"                # dealt new client\n"
"                if message.startswith(\"#\"):\n"
"                    message = message.replace(\"#\", \"\")\n"
"                    print(f\"Username: {message}\")\n"
"\n"
"                    #  save user name and id pair\n"
"                    connected_clients_id_name[websocket] = message\n"
"                    connected_clients_name_id[message] = websocket\n"
"                else:\n"
"                    # find user name\n"
"                    client_name = connected_clients_id_name[websocket]\n"
"\n"
"                    # print the received message in server terminal\n"
"                    print(f\"Received message from {client_name}: {message}\")\n"
"\n"
"                    # Send the message to all connected clients\n"
"                    check = f\"Message from {client_name}: {message}\"\n"
"\n"
"                    # dealt with PUB & SUB\n"
"                    if message[:3] in [\"SUB\", \"sub\"]:\n"
"                        print(\"call sub\")\n"
"                        try:\n"
"                            self.sub(websocket, message[4:])\n"
"                        except ValueError:\n"
"                            err = 'ERROR: usage: SUB <name>'\n"
"                            await asyncio.wait(websocket.send(err))\n"
"\n"
"                    elif message[:3] in [\"PUB\", \"pub\"]:\n"
"                        print(\"call pub\")\n"
"                        to_inform = self.pub(websocket, message[4:])\n"
"                        await asyncio.wait([client.send(connected_clients_id_name[websocket] +\" send: \"+ message[4:]) for client in to_inform])\n"
"\n"
"                    elif message[:5] in [\"MySQL\",\"mysql\"]:\n"
"                        print(\"call mysql\")\n"
"                        print(message[6:])\n"
"                        # await asyncio.wait(websocket.send(message[6:]))\n"
"                        try:\n"
"                            # self.cursor.execute('USE pub_sub')\n"
"                            self.cursor.execute(message[6:])\n"
"                            \n"
"                            # query\n"
"                            try:\n"
"                                results = self.cursor.fetchall()\n"
"                                print(results)\n"
"                                for r in results:\n"
"                                    print(r)\n"
"                                    await asyncio.wait([websocket.send(str(r))])\n"
"                            except:\n"
"                                pass\n"
"\n"
"                            # insert\n"
"                            try:\n"
"                                self.connection.commit()\n"
"                            except:\n"
"                                pass\n"
"\n"
"                        except Exception as e:\n"
"                            print(e)\n"
"                            err = \"ERROR: wrong SQL syntax\"\n"
"                            await asyncio.wait(websocket.send(err))\n"
"\n"
"                    elif message[:3] in [\"All\", \"all\"]:\n"
"                        client_name = connected_clients_id_name[websocket]\n"
"                        print(f\"{client_name}Send message to all client\")\n"
"\n"
"                        await asyncio.wait([client.send(client_name+ \" says: \"+message[4:]) for client in connected_clients])\n"
"                    else:\n"
"                        # print(message)\n"
"                        print(\"Message pass!\")\n"
"                        \n"
"        finally:\n"
"            # Remove the client from the connected clients set when the connection is closed\n"
"            connected_clients.remove(websocket)\n"
"\n"
"if __name__ == '__main__':\n"
"    # print(\"File called!\")\n"
"    parser = argparse.ArgumentParser()\n"
"    parser.add_argument(\"--user\", type=str, default=\"root\", required=False, help=\"User to login MySQL\")\n"
"    parser.add_argument(\"--password\", type=str, default=\"1234\", required=False, help=\"Password to login MySQL\")\n"
"    parser.add_argument(\"--ip\", type=str, default=\"127.0.0.1\", required=False, help=\"IP address for this server\")\n"
"    parser.add_argument(\"--port\", type=int, default=1235, required=False, help=\"Port to connect\")\n"
"    args = parser.parse_args()    \n"
"    # print(\"Argparse end!\")\n"
"\n"
"    server = ps_server(args.user, args.password, args.ip, args.port)\n"
